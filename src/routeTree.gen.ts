/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PlatformChoiceIndexImport } from './routes/platform-choice/index'
import { Route as TestDashboardImport } from './routes/test/dashboard'
import { Route as SharePlaylistIdImport } from './routes/share/$playlistId'
import { Route as PlatformChoiceTidalImport } from './routes/platform-choice/tidal'
import { Route as PlatformChoiceSpotifyImport } from './routes/platform-choice/spotify'
import { Route as PlatformChoiceDeezerImport } from './routes/platform-choice/deezer'
import { Route as PlatformChoiceAppleMusicImport } from './routes/platform-choice/apple-music'
import { Route as AuthentificationConnexionPageImport } from './routes/authentification/connexion-page'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlatformChoiceIndexRoute = PlatformChoiceIndexImport.update({
  id: '/platform-choice/',
  path: '/platform-choice/',
  getParentRoute: () => rootRoute,
} as any)

const TestDashboardRoute = TestDashboardImport.update({
  id: '/test/dashboard',
  path: '/test/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const SharePlaylistIdRoute = SharePlaylistIdImport.update({
  id: '/share/$playlistId',
  path: '/share/$playlistId',
  getParentRoute: () => rootRoute,
} as any)

const PlatformChoiceTidalRoute = PlatformChoiceTidalImport.update({
  id: '/platform-choice/tidal',
  path: '/platform-choice/tidal',
  getParentRoute: () => rootRoute,
} as any)

const PlatformChoiceSpotifyRoute = PlatformChoiceSpotifyImport.update({
  id: '/platform-choice/spotify',
  path: '/platform-choice/spotify',
  getParentRoute: () => rootRoute,
} as any)

const PlatformChoiceDeezerRoute = PlatformChoiceDeezerImport.update({
  id: '/platform-choice/deezer',
  path: '/platform-choice/deezer',
  getParentRoute: () => rootRoute,
} as any)

const PlatformChoiceAppleMusicRoute = PlatformChoiceAppleMusicImport.update({
  id: '/platform-choice/apple-music',
  path: '/platform-choice/apple-music',
  getParentRoute: () => rootRoute,
} as any)

const AuthentificationConnexionPageRoute =
  AuthentificationConnexionPageImport.update({
    id: '/authentification/connexion-page',
    path: '/authentification/connexion-page',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/authentification/connexion-page': {
      id: '/authentification/connexion-page'
      path: '/authentification/connexion-page'
      fullPath: '/authentification/connexion-page'
      preLoaderRoute: typeof AuthentificationConnexionPageImport
      parentRoute: typeof rootRoute
    }
    '/platform-choice/apple-music': {
      id: '/platform-choice/apple-music'
      path: '/platform-choice/apple-music'
      fullPath: '/platform-choice/apple-music'
      preLoaderRoute: typeof PlatformChoiceAppleMusicImport
      parentRoute: typeof rootRoute
    }
    '/platform-choice/deezer': {
      id: '/platform-choice/deezer'
      path: '/platform-choice/deezer'
      fullPath: '/platform-choice/deezer'
      preLoaderRoute: typeof PlatformChoiceDeezerImport
      parentRoute: typeof rootRoute
    }
    '/platform-choice/spotify': {
      id: '/platform-choice/spotify'
      path: '/platform-choice/spotify'
      fullPath: '/platform-choice/spotify'
      preLoaderRoute: typeof PlatformChoiceSpotifyImport
      parentRoute: typeof rootRoute
    }
    '/platform-choice/tidal': {
      id: '/platform-choice/tidal'
      path: '/platform-choice/tidal'
      fullPath: '/platform-choice/tidal'
      preLoaderRoute: typeof PlatformChoiceTidalImport
      parentRoute: typeof rootRoute
    }
    '/share/$playlistId': {
      id: '/share/$playlistId'
      path: '/share/$playlistId'
      fullPath: '/share/$playlistId'
      preLoaderRoute: typeof SharePlaylistIdImport
      parentRoute: typeof rootRoute
    }
    '/test/dashboard': {
      id: '/test/dashboard'
      path: '/test/dashboard'
      fullPath: '/test/dashboard'
      preLoaderRoute: typeof TestDashboardImport
      parentRoute: typeof rootRoute
    }
    '/platform-choice/': {
      id: '/platform-choice/'
      path: '/platform-choice'
      fullPath: '/platform-choice'
      preLoaderRoute: typeof PlatformChoiceIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/authentification/connexion-page': typeof AuthentificationConnexionPageRoute
  '/platform-choice/apple-music': typeof PlatformChoiceAppleMusicRoute
  '/platform-choice/deezer': typeof PlatformChoiceDeezerRoute
  '/platform-choice/spotify': typeof PlatformChoiceSpotifyRoute
  '/platform-choice/tidal': typeof PlatformChoiceTidalRoute
  '/share/$playlistId': typeof SharePlaylistIdRoute
  '/test/dashboard': typeof TestDashboardRoute
  '/platform-choice': typeof PlatformChoiceIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/authentification/connexion-page': typeof AuthentificationConnexionPageRoute
  '/platform-choice/apple-music': typeof PlatformChoiceAppleMusicRoute
  '/platform-choice/deezer': typeof PlatformChoiceDeezerRoute
  '/platform-choice/spotify': typeof PlatformChoiceSpotifyRoute
  '/platform-choice/tidal': typeof PlatformChoiceTidalRoute
  '/share/$playlistId': typeof SharePlaylistIdRoute
  '/test/dashboard': typeof TestDashboardRoute
  '/platform-choice': typeof PlatformChoiceIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/authentification/connexion-page': typeof AuthentificationConnexionPageRoute
  '/platform-choice/apple-music': typeof PlatformChoiceAppleMusicRoute
  '/platform-choice/deezer': typeof PlatformChoiceDeezerRoute
  '/platform-choice/spotify': typeof PlatformChoiceSpotifyRoute
  '/platform-choice/tidal': typeof PlatformChoiceTidalRoute
  '/share/$playlistId': typeof SharePlaylistIdRoute
  '/test/dashboard': typeof TestDashboardRoute
  '/platform-choice/': typeof PlatformChoiceIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/authentification/connexion-page'
    | '/platform-choice/apple-music'
    | '/platform-choice/deezer'
    | '/platform-choice/spotify'
    | '/platform-choice/tidal'
    | '/share/$playlistId'
    | '/test/dashboard'
    | '/platform-choice'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/authentification/connexion-page'
    | '/platform-choice/apple-music'
    | '/platform-choice/deezer'
    | '/platform-choice/spotify'
    | '/platform-choice/tidal'
    | '/share/$playlistId'
    | '/test/dashboard'
    | '/platform-choice'
  id:
    | '__root__'
    | '/'
    | '/authentification/connexion-page'
    | '/platform-choice/apple-music'
    | '/platform-choice/deezer'
    | '/platform-choice/spotify'
    | '/platform-choice/tidal'
    | '/share/$playlistId'
    | '/test/dashboard'
    | '/platform-choice/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthentificationConnexionPageRoute: typeof AuthentificationConnexionPageRoute
  PlatformChoiceAppleMusicRoute: typeof PlatformChoiceAppleMusicRoute
  PlatformChoiceDeezerRoute: typeof PlatformChoiceDeezerRoute
  PlatformChoiceSpotifyRoute: typeof PlatformChoiceSpotifyRoute
  PlatformChoiceTidalRoute: typeof PlatformChoiceTidalRoute
  SharePlaylistIdRoute: typeof SharePlaylistIdRoute
  TestDashboardRoute: typeof TestDashboardRoute
  PlatformChoiceIndexRoute: typeof PlatformChoiceIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthentificationConnexionPageRoute: AuthentificationConnexionPageRoute,
  PlatformChoiceAppleMusicRoute: PlatformChoiceAppleMusicRoute,
  PlatformChoiceDeezerRoute: PlatformChoiceDeezerRoute,
  PlatformChoiceSpotifyRoute: PlatformChoiceSpotifyRoute,
  PlatformChoiceTidalRoute: PlatformChoiceTidalRoute,
  SharePlaylistIdRoute: SharePlaylistIdRoute,
  TestDashboardRoute: TestDashboardRoute,
  PlatformChoiceIndexRoute: PlatformChoiceIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/authentification/connexion-page",
        "/platform-choice/apple-music",
        "/platform-choice/deezer",
        "/platform-choice/spotify",
        "/platform-choice/tidal",
        "/share/$playlistId",
        "/test/dashboard",
        "/platform-choice/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/authentification/connexion-page": {
      "filePath": "authentification/connexion-page.tsx"
    },
    "/platform-choice/apple-music": {
      "filePath": "platform-choice/apple-music.tsx"
    },
    "/platform-choice/deezer": {
      "filePath": "platform-choice/deezer.tsx"
    },
    "/platform-choice/spotify": {
      "filePath": "platform-choice/spotify.tsx"
    },
    "/platform-choice/tidal": {
      "filePath": "platform-choice/tidal.tsx"
    },
    "/share/$playlistId": {
      "filePath": "share/$playlistId.tsx"
    },
    "/test/dashboard": {
      "filePath": "test/dashboard.tsx"
    },
    "/platform-choice/": {
      "filePath": "platform-choice/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
